/*
 * GccApplication3.c
 *
 * Created: 11/27/2016 15:53:24
 * Author : Crawler
 */ 

#include<avr/io.h>
#include<avr/interrupt.h>

volatile int sw=0,fadeon=0,fadeof=1;
double procent=0;
int i=0;

ISR(TIMER1_COMPA_vect)
{
	SREG|=(1<<7);
	PORTD^=(1<<4);
}

ISR(TIMER0_OVF_vect)
{
	OCR0A=(procent/100.0)*255.0; // recalculez procentul la fiecare overflow
}

void seg(int i)
{
	if( i == 0 )
	{
		PORTD|=(1<<3)|(1<<5)|(1<<7);
		PORTB|=(1<<1)|(1<<2)|(1<<3);
	}

	if( i == 1 )
	{
		PORTD|=(1<<3);
		PORTB|=(1<<1);
	}

	if( i == 2 )
	{
		PORTD|=(1<<5)|(1<<7);
		PORTB|=(1<<0)|(1<<1)|(1<<3);
	}

	if( i == 3 )
	{
		PORTD|=(1<<3)|(1<<5);
		PORTB|=(1<<3)|(1<<1)|(1<<0);
	}

	if( i == 4 )
	{
		PORTD|=(1<<3);
		PORTB|=(1<<0)|(1<<1)|(1<<2);
	}

	if( i == 5 )
	{
		PORTD|=(1<<3)|(1<<5);
		PORTB|=(1<<3)|(1<<2)|(1<<0);
	}

	if( i == 6 )
	{
		PORTD|=(1<<3)|(1<<5)|(1<<7);
		PORTB|=(1<<3)|(1<<2)|(1<<0);
	}

	if( i == 7 )
	{
		PORTD|=(1<<3);
		PORTB|=(1<<3)|(1<<1);
	}

	if( i == 8 )
	{
		PORTD|=(1<<3)|(1<<5)|(1<<7);
		PORTB|=(1<<0)|(1<<1)|(1<<2)|(1<<3);
	}

	if( i == 9 )
	{
		PORTD|=(1<<3)|(1<<5);
		PORTB|=(1<<0)|(1<<1)|(1<<2)|(1<<3);
	}
}

void delay_ms(int ms) {
	while (ms--) {
		for (volatile int n=0; n < 19; n++); // o milisecunda
	}
}


int main(void)
{
	DDRD = 0xFF;
	DDRB = 0xDF;
	seg(0);

//////////////////// LED BLINK     ////////////////////////////
	TCCR1B|=(1<<3); // wgm12 modul 0100 ctc cu top ocr1a
	OCR1A=19000;
    TIMSK1|=(1<<1); // are loc intreruperea la egalitate cu ocr1a
	SREG|=(1<<7); // enable global intr I bit

	TCCR1B|=(1<<0)|(1<<2); // prescaler la 1024
////////////////////  /LED BLINK     //////////////////////////

//////////////////     PWM LED      //////////////////////////
	TCCR0A|=(1<<7); // modul in care la inceput porneste pwn si la valoarea lui OC0A pe pinul D6
	TCCR0A|=(1<<0)|(1<<1); // modul fast pwm
	TIMSK0|=(1<<0); // overflow intr enable 
	TCCR0B|=(1<<0); // modul intrerupere fara clock
	OCR0A=(procent/100.0)*255.0;
	SREG|=(1<<7);
//////////////////     /PWM LED      /////////////////////////

    while (1)
    {
//////////////////     PWM LED      //////////////////////////
	if( fadeon == 0 )
	{
		delay_ms(10);

		procent+=10;

		if(procent>100)
		{
			sw=1;
			procent=100;
		}

		if(sw==1)
		{
			delay_ms(200);
			sw=0;
			fadeon=1;
			fadeof=0;
		}
		
		
	}

	if( fadeof == 0 )
	{
		delay_ms(10);
		procent-=10;

		if(procent<0)
		{
			sw=1;
			procent=0;
		}

		if(sw==1)
		{
			delay_ms(300);
			sw=0;
			fadeon=0;
			fadeof=1;
		}
	}

//////////////////     /PWM LED      /////////////////////////

//////////////////     7 SEGMENT      ////////////////////////

while ( PINB & (1<<PB5) ) // daca butonul e apasat
{

	if (PINB & (1<<PB5))  // la apasare, afisez urmatoarea cifra
	{
		i++;
		
		if(i>9)
			i=0;
		seg(i);
		
	//	delay_ms(10);
	}
	else
		seg(i);

	if (PINB & (1<<PB5)) // daca dupa 500ms butonul inca e apasat
	{
	//	delay_ms(150); // mai astept 1.5 s
		if (PINB & (1<<PB5)) // daca e apasat de 2 secunde
		{				  // afisez 0, resetez i, dau o secunda delay sa se ridice degetul de pe buton
			seg(0);
			i=0;
		//	delay_ms(100);
		}
	}
}



//////////////////     /7 SEGMENT      ///////////////////////





    } // de la while
}

